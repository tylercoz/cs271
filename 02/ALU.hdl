// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
      // Zero out x input...
      Or16(a=x, b=true, out=xAllOnes);
      Not16(in=xAllOnes, out=xZERO);
      // ... if zx = 1
      Mux16(a=x, b=xZERO, sel=zx, out=zxOUT);

      // Negate x input...
      Not16(in=zxOUT, out=negateZxOUT);
      // ... if nx = 1
      Mux16(a=zxOUT, b=negateZxOUT, sel=nx, out=zxnxOUT);

      // Zero out y input...
      Or16(a=y, b=true, out=yAllOnes);
      Not16(in=yAllOnes, out=yZERO);
      // ... if zy = 1
      Mux16(a=y, b=yZERO, sel=zy, out=zyOUT);

      // Negate y input...
      Not16(in=zyOUT, out=negateZyOUT);
      // ... if ny = 1
      Mux16(a=zyOUT, b=negateZyOUT, sel=ny, out=zynyOUT);

      // x + y 
      Add16(a=zxnxOUT, b=zynyOUT, out=AddZNOut);

      // x & y
      And16(a=zxnxOUT, b=zynyOUT, out=AndZNOut);

      // (x + y) if f == 1, else x & y
      Mux16(a=AndZNOut, b=AddZNOut, sel=f, out=FAddAndZNOut);

      // negate (x + y) || (x & y)...
      Not16(in=FAddAndZNOut, out=NFAddAndZNOut);

      // ... if no = 1
      Mux16(a=FAddAndZNOut, b=NFAddAndZNOut, sel=no, out=finaloutput);
      And16(a=finaloutput, b=true, out=out);

      // zr
      And16(a=finaloutput, b=true, out[0..7]=zrFirstHalf);
      And16(a=finaloutput, b=true, out[8..15]=zrSecondHalf);
      Or8Way(in=zrFirstHalf, out=zrFirstHalfOR);
      Or8Way(in=zrSecondHalf, out=zrSecondHalfOR);
      Or(a=zrFirstHalfOR, b=zrSecondHalfOR, out=nout);
      Not(in=nout, out=zr);


      // ng
      And16(a=finaloutput, b[15]=true, out[15]=ng);


}